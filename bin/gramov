#!/usr/bin/env python
# -*- coding: utf-8 -*-
import telebot
from markoff import Markoff
import argparse

def parseArgs():
    parser = argparse.ArgumentParser(description=
        'A telegram bot that listens to ')
    parser.prog = 'tell-off'
    parser.add_argument('--token','-t',
            required=True, type=str, nargs=1, help='Telgram API Token')
    parser.add_argument('--file','-f',
            required=False, type=str, nargs='?', default=None,
            help='Recieved phrases backup file')
    parser.add_argument('--verbose','-v',
            help='print events to stdout', action='store_true')
    parser.add_argument('--max-len','-l',
            required=False, nargs=1,
            help='Maximum length of message to process, in chars')
    args = parser.parse_args()
    return args


args = parseArgs() 

bot = telebot.TeleBot(args.token[0])
markoff = Markoff(args.file)

@bot.message_handler(commands=['speak'])
def send_sentence(message):
    msg = markoff.gen_sentence()
    if args.verbose:
        print('Sending: ', msg.encode('utf-8'))
    bot.send_message(message.chat.id, msg)

@bot.message_handler(func=lambda message: True)
def learn_sentence(message):
    if args.max_len and len(message.text) > args.max_len:
        if args.verbose:
            print('Rejecting message: text is longer than max length')
        return
    if args.verbose:
        print('Learning: ', message.text.encode('utf-8'))
    markoff.add_vocab(message.text)

bot.polling()
